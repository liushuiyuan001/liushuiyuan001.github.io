import{o as e,c as t,d as n}from"./app.acfc0ccb.js";const o='{"title":"vue组件传值下","description":"","frontmatter":{},"headers":[{"level":3,"title":"vue组件传值下","slug":"vue组件传值下"}],"relativePath":"vue/PROP2.md","lastUpdated":1631282289130}',r={},a=[n('<h3 id="vue组件传值下" tabindex="-1">vue组件传值下 <a class="header-anchor" href="#vue组件传值下" aria-hidden="true">#</a></h3><ol><li>$parent/$childern &amp; ref</li></ol><pre><code>##### ref\n```\n&lt;div ref=&quot;a&quot;&gt;&lt;/div&gt;\ndata(){\n   return {\n      title:&quot;Hello World&quot;\n   }\n}\n//访问\nthis.refs.a.title = &quot;Hello Vue&quot;\n```\n#####  $parent/$childern\n```\n// Son.vue\ndata(){\n   return {\n      sonTitle:&quot;Son Title&quot;\n   }\n}\n// 访问父组件属性\nthis.$parent.fartherTitle = &quot;Son Change Title&quot;\nFarther.vue\n&lt;Son&gt;&lt;/Son&gt;\ndata(){\n   return {\n      fartherTitle:&quot;Farther Title&quot;\n   }\n}\n//访问子组件属性\nthis.$children[0].sonTitle = &#39;Farther Change Title&#39;\n```\n</code></pre><ol start="2"><li>$attrs、$listeners ----父向子通讯</li></ol><pre><code>```\n\n```\n</code></pre><ol start="3"><li>provide / inject这对选项需要一起使用 vuejs 官网解释</li></ol><pre><code>```\nprovide 和 inject 主要为高阶插件/组件库提供用例。并不推荐直接用于应用程序代码中。\n这对选项需要一起使用，以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效。如果你熟悉 React，这与 React 的上下文特性很相似。\n```\n官网demo,具体见官网。\n```\n</code></pre><p>// 父级组件提供 &#39;foo&#39; var Provider = { provide: { foo: &#39;bar&#39; } } // 子组件注入 &#39;foo&#39; var Child = { inject: [&#39;foo&#39;], created () { console.log(this.foo) // =&gt; &quot;bar&quot; } } ``` provide与inject 怎么实现数据响应式</p><div class="language-"><pre><code>provide祖先组件的实例，然后在子孙组件中注入依赖，这样就可以在子孙组件中直接修改祖先组件的实例的属性，\n不过这种方法有个缺点就是这个实例上挂载很多没有必要的东西比如props，methods\n</code></pre></div><div class="language-"><pre><code>使用2.6最新API Vue.observable 优化响应式 provide(推荐) 我们来看个例子：\n孙组件E 和 获取A组件传递过来的color值，并能实现数据响应式变化，\n即A组件的color变化后，组件E、F会跟着变（核心代码如下：）\n</code></pre></div><ol start="4"><li>broadcast / dispatch Vue1.0有$boardcast(通知所有子组件触发方法)与$diapatch(通知所有父组件触发方法)，vue2.0就删掉了。但是在一些组价库中，还是有这个方法，比如ElementUI</li></ol><pre><code>```\n</code></pre><p>Vue.prototype.$diapatch = function $diapatch(eventName, data){ let parent = this.$parent while(parent) { parent.emit(eventName,data) parent = this.$parent } } <code></code> Vue.prototype.$broadcast = function $broadcast(eventName, data) { const broadcast = (children) =&gt; { children.forEach(child =&gt; { child.$emit(eventName, data) if (child.$children) { broadcast(child.$children) } }) } broadcast(this.$children) } ``` 5. model和.sync</p><div class="language-"><pre><code>\n</code></pre></div><ol start="6"><li>发布/订阅模式、rxjs等</li></ol>',15)];r.render=function(n,o,r,i,d,l){return e(),t("div",null,a)};export{o as __pageData,r as default};
