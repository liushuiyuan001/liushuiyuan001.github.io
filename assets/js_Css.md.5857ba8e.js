import{o as n,c as a,b as s}from"./app.f15b287e.js";const p='{"title":"单行多行显示省略号","description":"","frontmatter":{},"headers":[{"level":3,"title":"一、CSS基础","slug":"一、css基础"}],"relativePath":"js/Css.md","lastUpdated":1639012814515}',t={},e=[s('<h4 id="单行多行显示省略号" tabindex="-1">单行多行显示省略号 <a class="header-anchor" href="#单行多行显示省略号" aria-hidden="true">#</a></h4><div class="language-css"><pre><code><span class="token selector">.aa</span> <span class="token punctuation">{</span>\n\t<span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>\n\t<span class="token property">text-overflow</span><span class="token punctuation">:</span>ellipsis<span class="token punctuation">;</span>\n\t<span class="token property">white-space</span><span class="token punctuation">:</span>nowrap<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.bb</span> <span class="token punctuation">{</span>\n  <span class="token property">height</span><span class="token punctuation">:</span>65px<span class="token punctuation">;</span>\n  <span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>\n  <span class="token property">text-overflow</span><span class="token punctuation">:</span>ellipsis<span class="token punctuation">;</span>\n\n  <span class="token property">display</span><span class="token punctuation">:</span>-webkit-box<span class="token punctuation">;</span>\n  <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span>vertical<span class="token punctuation">;</span>\n  <span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span>3<span class="token punctuation">;</span>\n  <span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="清除浮动的方式如下：" tabindex="-1"><strong>清除浮动的方式如下：</strong> <a class="header-anchor" href="#清除浮动的方式如下：" aria-hidden="true">#</a></h4><ul><li><p>给父级div定义<code>height</code>属性</p></li><li><p>最后一个浮动元素之后添加一个空的div标签，并添加<code>clear:both</code>样式</p></li><li><p>包含浮动元素的父级标签添加<code>overflow:hidden</code>或者<code>overflow:auto</code></p></li><li><p>使用 :after 伪元素。由于IE6-7不支持 :after，使用 zoom:1 触发 hasLayout**</p><div class="language-css"><pre><code><span class="token selector">.clearfix:after</span><span class="token punctuation">{</span>\n    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;\\200B&quot;</span><span class="token punctuation">;</span>\n    <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span> \n    <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token selector">.clearfix</span><span class="token punctuation">{</span>\n  *<span class="token property">zoom</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="一、css基础" tabindex="-1">一、CSS基础 <a class="header-anchor" href="#一、css基础" aria-hidden="true">#</a></h3><h4 id="一-css选择器及其优先级" tabindex="-1">一. CSS选择器及其优先级 <a class="header-anchor" href="#一-css选择器及其优先级" aria-hidden="true">#</a></h4><ol><li>id选择器 #id 100</li><li>类选择器 #classname 10</li><li>属性选择器 a[ref=&quot;eee&quot;] 10</li><li>伪类选择器 li:last-child 10</li><li>标签选择器 div 1</li><li>伪元素选择器 li:after</li><li>相邻兄弟选择器 h1+p 0</li><li>子选择器 ul&gt;li 0</li><li>后代选择器 li a 0</li><li>通配符选择器 * 0</li></ol><p>对于选择器的优先级</p><ul><li>内联样式 1000</li><li>id选择器 100</li><li>类选择器 伪类选择器 标签选择器 10</li><li>伪元素选择器 标签选择器 1</li></ul><p>注意事项</p><ul><li>!important声明的样式的优先级最高</li><li>如果优先级相同，则最后出现的样式生效</li><li>继承得到的样式的优先级最低</li><li>通用选择器、子选择器和相邻同胞选择器并不在这四个等级中，所以它们的权值都为0</li><li>样式表的来源不同时，优先级顺序为：内联样式 内部样式 外部样式 浏览器用户自定义样式 浏览器默认样式</li></ul></li></ul><h4 id="二、display的属性值及其作用" tabindex="-1">二、display的属性值及其作用 <a class="header-anchor" href="#二、display的属性值及其作用" aria-hidden="true">#</a></h4><div class="language-css"><pre><code>none   元素不显示，并且会从文档流中移除\nblock  块类型。默认宽度为父元素宽度，可设置宽高，换行显示\ninline 行内元素类型。默认宽度为内容宽度，不可设置宽高 同行显示\ninline-block 默认宽度为内容宽度，可以设置宽高，同行显示。\nlist-item 像块类型元素一样显示，并添加样式列表标记\ntable 此元素会作为块级表格来显示\ninherit 规定应该从父元素继承display属性的值\n行内元素：\n设置宽高无效\n可以设置水平方法方向的margin和padding属性，不能设置垂直方向的padding和margin\n不会自动换行\n块级元素：\n可以设置宽高\n设置marign和padding都有效\n可以自动换行\n多个块状，默认排列从上到下。\n</code></pre></div><h4 id="三、隐藏元素的方法有哪些" tabindex="-1">三、隐藏元素的方法有哪些 <a class="header-anchor" href="#三、隐藏元素的方法有哪些" aria-hidden="true">#</a></h4><div class="language-"><pre><code>display:none: 渲染树不会包含该渲染对象，因此该元素不会在页面中占据位置，也不会响应绑定的监听事件\nvisibility:hidden 元素在页面中仍占据空间，但是不会响应绑定的监听事件。\nopacity:0 将元素的透明度设置为0，以此来实现元素的隐藏。元素在页面中仍然占据空间，并且能够响应元素绑定的监听事件。\nposition: absolute 通过使用绝对定位将元素移除可视区域内，以此来实现元素的隐藏。\nz-index: 负值 来使其他元素遮盖住该元素，以此来实现隐藏\nclip/clip-path: 使用元素裁剪的方法来实现元素的隐藏，这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件\ntrabsform: scale(0,0) 将元素缩放为0，来实现元素的隐藏。这种方法下元素仍在页面中占据位置，但是不会响应绑定的监听事件。\n</code></pre></div><h4 id="四、link和-import的区别" tabindex="-1">四、link和@import的区别 <a class="header-anchor" href="#四、link和-import的区别" aria-hidden="true">#</a></h4><p>两者都是外部引用CSS的方式，它们的区别如下：</p><p>link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事物；@import属于CSS范畴，只能加载CSS</p><p>link引用CSS时,在页面载入时同时加载；@import需要页面网页完全载入以后加载</p><p>link是XHTML标签，无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持</p><p>link支持使用Javascript控制DOM去改变样式；而@import不支持</p><h4 id="五、transition和animation的区别" tabindex="-1">五、transition和animation的区别 <a class="header-anchor" href="#五、transition和animation的区别" aria-hidden="true">#</a></h4><p>transiton是过度属性，强调过度，它的实现需要触发一个事件(比如鼠标移动上去，焦点，点击等)才执行动画。它类似于flash的补间动画，设置一个开始关键帧 一个结束关键帧</p><p>Animation 是动画属性 它的实现不需要触发时间，设定很高时间之后可以自己执行， 且可以循环一个动画。它也类似于flash的补间动画，但是它可以设置多个关键帧（用@keyframe定义）完成动画。</p><h4 id="六、display-none与visibility-hidden的区别" tabindex="-1">六、display:none与visibility:hidden的区别 <a class="header-anchor" href="#六、display-none与visibility-hidden的区别" aria-hidden="true">#</a></h4><p>这两个属性都是让元素隐藏，不可见。两者区别如下</p><ol><li><p>在渲染树种</p><p>display:none 会让元素完全从渲染树中小时，渲染时不会占据任何空间</p><p>Visibility:hidden 不会让元素从渲染树中消失，渲染的元素还会占据相应的空间，只是内容不可见</p></li><li><p>是否是继承属性</p><p>display:none 是非继承属性，子孙加点会随着父节点从渲染树消失，通过修改子孙节点的属性也无法显示</p><p>Visibility: hidden 是继承属性，子孙节点消失是由于继承了hidden 通过设置visibility: visible 可以让子孙节点显示</p></li><li><p>修改常规文档流中元素的display通过会造成文档的重排，但是修改visibility属性只会造成本元素的重绘；</p></li><li><p>如果使用读屏器，设置为display:none 的内容不会被读取，设置为visibility:hidden的内容会被读取。</p></li></ol><h4 id="七、伪元素和伪类的区别和作用" tabindex="-1">七、伪元素和伪类的区别和作用 <a class="header-anchor" href="#七、伪元素和伪类的区别和作用" aria-hidden="true">#</a></h4><p>伪元素：在内容元素的前后插入额外的元素或者样式，但是这些元素实际上并不在文档中生成，它们只在外部显示可见，但是不会在文档的源代码中找到它们，因此，称为“伪”元素。例如</p><div class="language-css"><pre><code><span class="token selector">p::before</span><span class="token punctuation">{</span><span class="token property">content</span><span class="token punctuation">:</span><span class="token string">&quot;第一章&quot;</span><span class="token punctuation">}</span>\n<span class="token selector">p::after</span><span class="token punctuation">{</span><span class="token property">content</span><span class="token punctuation">:</span><span class="token string">&quot;Hot!&quot;</span><span class="token punctuation">}</span>\n<span class="token selector">p::first-line</span><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">}</span>\n<span class="token selector">p::first-letter</span><span class="token punctuation">{</span><span class="token property">font-size</span><span class="token punctuation">:</span>30px<span class="token punctuation">}</span>\n</code></pre></div><p>伪类：将特殊的效果添加到特定选择器上。它是已有元素上添加类别的，不会产生新的元素</p><h4 id="八、对requestanimationframe的理解" tabindex="-1">八、对requestAnimationFrame的理解 <a class="header-anchor" href="#八、对requestanimationframe的理解" aria-hidden="true">#</a></h4><blockquote><p>window.requestAnimationFrame告诉浏览器--你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行。</p></blockquote><p>该方法属于宏任务；使用cancelAnimationFrame来取消执行动画</p><p>优势：</p><p>CPU节能：</p><p>函数节流</p><p>减少DOM操作</p><h4 id="九、对盒模型的理解" tabindex="-1">九、对盒模型的理解 <a class="header-anchor" href="#九、对盒模型的理解" aria-hidden="true">#</a></h4><p>Box-sizing: content-box标准盒模型</p><p>box-sizing：border-box IE盒模型(怪异盒模型)</p><h4 id="十、为什么有时候用translate来改变位置而不是定位？" tabindex="-1">十、为什么有时候用translate来改变位置而不是定位？ <a class="header-anchor" href="#十、为什么有时候用translate来改变位置而不是定位？" aria-hidden="true">#</a></h4><p>trannslate是transform属性的一个值。改变transform或opacity不会触发浏览器重新布局(reflow)或重绘，只会触发复合。而改变绝对定会触发重新布局，进而触发重绘和复合。transform使浏览器为元素创建一个GPU图层，但改变绝对定位会使用CPU。因此translate更高效，可以缩短平滑动画的绘制时间。而translate改变位置时，元素依然会占据其原始空间，绝对定位就不会发生这种情况。</p><h4 id="十一、li与li之间有看不见的空不间隔是什么原因引起的？如何解决？" tabindex="-1">十一、li与li之间有看不见的空不间隔是什么原因引起的？如何解决？ <a class="header-anchor" href="#十一、li与li之间有看不见的空不间隔是什么原因引起的？如何解决？" aria-hidden="true">#</a></h4><p>浏览器会把inline内联元素键的空白字符（空格、换行、Tab）渲染成一个空格。为了美观，通常是一个li放在一行，这导致li换行后产生换行字符，它变成一个空格，占用了一个字符的宽度。</p><p>1 为li设置float:left 不足：有些容器不能设置浮动</p><p>2 将所有li写在同一行 不足 代码不美观</p><p>3 将ul内的字符尺寸直接设置为0 即font-size 0 不足：ul中的其他字符尺寸也被设置为0</p><p>4消除 ul的字符间隔letter-spacing：-8px 不足：这也设置了 li内的字符间隔，因此需要将li内的字符间隔设置为默认letter-spacing：normal</p><h4 id="十二、css3中有哪些新特性" tabindex="-1">十二、CSS3中有哪些新特性 <a class="header-anchor" href="#十二、css3中有哪些新特性" aria-hidden="true">#</a></h4><p>新增各种CSS选择器（：not（.input））: 所有从class不是input的节点</p><p>圆角 border-radius</p><p>多列布局 multi-column layout</p><p>阴影和反射 Shadow reflect</p><p>文字特性 text-shadow</p><p>线性渐变 gradient</p><p>旋转 transform</p><p>增加了旋转 缩放 定位 倾斜 动画 多背景</p>',51)];t.render=function(s,p,t,i,o,l){return n(),a("div",null,e)};export{p as __pageData,t as default};
