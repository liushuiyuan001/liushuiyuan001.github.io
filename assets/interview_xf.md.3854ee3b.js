import{o as n,c as s,b as a}from"./app.37666d6b.js";const p='{"title":"","description":"","frontmatter":{},"relativePath":"interview/xf.md","lastUpdated":1642304767411}',t={},o=[a('<ol><li><p>useRef和useState的区别</p><div class="language-"><pre><code>1. useState是异步的,useRef是同步的\n2. useState会触发视图更新,useRef不会\n3. useRef是引用类型，一个变了另外一个也会变\n</code></pre></div></li><li><p>Promise.all</p><div class="language-javascript"><pre><code>Promise<span class="token punctuation">.</span><span class="token function-variable function">all</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;arguments must be a array&#39;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">let</span> resolvedCounter <span class="token operator">=</span> <span class="token number">0</span>\n        <span class="token keyword">let</span> promiseNum <span class="token operator">=</span> promises<span class="token punctuation">.</span>length\n        <span class="token keyword">let</span> resolvedResult <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> promiseNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                resolvedCounter<span class="token operator">++</span>\n                resolvedResult<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value\n                <span class="token keyword">if</span><span class="token punctuation">(</span>resolvedCounter <span class="token operator">===</span> promiseNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>resolvedResult<span class="token punctuation">)</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>React高阶组件的概念以及出现的问题</p></li><li><p>vue和react的区别</p></li></ol>',1)];t.render=function(a,p,t,e,c,u){return n(),s("div",null,o)};export{p as __pageData,t as default};
