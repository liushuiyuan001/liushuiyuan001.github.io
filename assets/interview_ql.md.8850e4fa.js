import{o as n,c as s,b as a}from"./app.3fe4aed4.js";const p='{"title":"双指针对排序后的数组去重","description":"","frontmatter":{},"relativePath":"interview/ql.md","lastUpdated":1649066048545}',t={},o=[a('<ol><li>组件的pureComponent原理和memo</li><li>hook的useEffect 和 useLayout</li><li>函数的高阶组件理解以及问题</li><li>闭包理解，以及为什么形成闭包</li><li>在项目中用到了哪些设计模式</li><li>mobx的原理以及对事务的理解</li><li>hook的cleanup以及和compoentunmounted的区别</li></ol><div class="language-"><pre><code>cleanup是在函数组件每次重新render时执行，compoententunmounted是在组件卸载时运行\n</code></pre></div><ol start="8"><li>链式调用一个数组中都为异步的方法,后一个依赖前一个的输出参数</li></ol><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">testAsync</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>\n            <span class="token function">resolve</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> asyncList <span class="token operator">=</span> <span class="token punctuation">[</span>testAsync<span class="token punctuation">,</span>testAsync<span class="token punctuation">,</span>testAsync<span class="token punctuation">]</span>\n<span class="token comment">// async function A(arr)  {</span>\n<span class="token comment">//     let pre = 0</span>\n<span class="token comment">//     for (let item of arr) {</span>\n<span class="token comment">//         let result = await item(pre)</span>\n<span class="token comment">//         pre = result</span>\n<span class="token comment">//     }</span>\n<span class="token comment">//     return pre</span>\n<span class="token comment">// }</span>\n\n<span class="token comment">// A(asyncList)</span>\n\n<span class="token keyword">function</span> <span class="token constant">B</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span>curr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> pre<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token function">curr</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token constant">B</span><span class="token punctuation">(</span>asyncList<span class="token punctuation">)</span>\n</code></pre></div><h4 id="双指针对排序后的数组去重" tabindex="-1">双指针对排序后的数组去重 <a class="header-anchor" href="#双指针对排序后的数组去重" aria-hidden="true">#</a></h4><div class="language-javascript"><pre><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span>\narr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span>curr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span>pre<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> curr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> pre\n      <span class="token punctuation">}</span>\n      pre<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span>\n      <span class="token keyword">return</span> pre\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token constant">D</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n         arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>\n       <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',6)];t.render=function(a,p,t,e,c,u){return n(),s("div",null,o)};export{p as __pageData,t as default};
