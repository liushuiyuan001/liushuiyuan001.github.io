import{o as n,c as s,b as a}from"./app.f15b287e.js";const t='{"title":"一、JavaScript基础","description":"","frontmatter":{},"headers":[{"level":3,"title":"一、JavaScript基础","slug":"一、javascript基础"}],"relativePath":"js/Code.md","lastUpdated":1638184755949}',p={},o=[a('<h3 id="一、javascript基础" tabindex="-1">一、JavaScript基础 <a class="header-anchor" href="#一、javascript基础" aria-hidden="true">#</a></h3><br><h4 id="_1-手写-object-create" tabindex="-1">1.手写 Object.create <a class="header-anchor" href="#_1-手写-object-create" aria-hidden="true">#</a></h4><p>思路：将传入的对象作为原型</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> obj\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="_2-手写instanceof方法" tabindex="-1">2. 手写instanceof方法 <a class="header-anchor" href="#_2-手写instanceof方法" aria-hidden="true">#</a></h4><p>instanceof 运算符用于判断构造函数的prototype属性是否出现在对象的原型链中的任何位置</p><p>实现步骤：</p><ol><li>首先获取类型的原型</li><li>然后获取对象的原型</li><li>然后一直循环判断对象的原型是否等于类型的原型，直到对象原型为null，因为原型链最终为null</li></ol><p>具体实现：</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">myInstanceof</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span>right</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">let</span> proto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span>\n\t<span class="token keyword">const</span> prototype <span class="token operator">=</span> right<span class="token punctuation">.</span>prototype\n  <span class="token comment">// 判断构造函数的 prototype 对象是否在对象的原型链上</span>\n  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>proto<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>proto <span class="token operator">===</span> prototype<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>\n    proto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>proto<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="_3-手写new操作符" tabindex="-1">3. 手写new操作符 <a class="header-anchor" href="#_3-手写new操作符" aria-hidden="true">#</a></h4><p>在调用new的过程中会发生以下四件事情</p><ol><li><p>首先创建一个新的空对象</p></li><li><p>设置原型 将对象的原型设置为函数的prototype对象</p></li><li><p>让函数的this指向这个对象 指向构造函数的代码 为这个新对象添加属性</p></li><li><p>判断函数的返回值类型 如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">objectFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">let</span> newObject <span class="token operator">=</span> <span class="token keyword">null</span>\n  <span class="token keyword">let</span> constructor <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>\n  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">null</span>\n  <span class="token comment">// 判断参数是否是一个函数</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> constructor <span class="token operator">!==</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;tYpe error&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 新建一个空对象 对象的原型为构造函数的 prototype 对象</span>\n  newObject <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>\n  <span class="token comment">// 将 this 指向新建对象 并执行函数</span>\n  result <span class="token operator">=</span> <span class="token function">constructor</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>newObject<span class="token punctuation">,</span>arguments<span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n  <span class="token comment">// 判断返回对象</span>\n  <span class="token keyword">let</span> flag <span class="token operator">=</span> result <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> result <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> result <span class="token operator">===</span> <span class="token string">&#39;funtion&#39;</span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> flag <span class="token operator">?</span> result <span class="token operator">:</span> newObject\n<span class="token punctuation">}</span>\n<span class="token comment">// 使用方法</span>\n<span class="token function">objectFactory</span><span class="token punctuation">(</span>Foo<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>\n</code></pre></div></li></ol><h4 id="_4-手写promise" tabindex="-1">4. 手写Promise <a class="header-anchor" href="#_4-手写promise" aria-hidden="true">#</a></h4><div class="language-javascript"><pre><code><span class="token keyword">const</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">&#39;pending&#39;</span>\n<span class="token keyword">const</span> <span class="token constant">RESOLVED</span> <span class="token operator">=</span> <span class="token string">&#39;resolved&#39;</span>\n<span class="token keyword">const</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">&#39;rejected&#39;</span>\n\n<span class="token keyword">function</span> <span class="token function">MyPromise</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// 保存初始化状态</span>\n\t<span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span>\n\n\t<span class="token comment">// 初始化状态</span>\n\t<span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token constant">PENDING</span>\n\t\n\t<span class="token comment">// 用于保存 resolve 或者 rejected 传入的值</span>\n\t<span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span>\n\t\n\t<span class="token comment">// 用于保存 resolve 的回调函数</span>\n\t<span class="token keyword">this</span><span class="token punctuation">.</span>resolvedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\t\n\t<span class="token comment">// 用于保存 reject 的回调函数</span>\n\t<span class="token keyword">this</span><span class="token punctuation">.</span>rejectedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\t\n\t<span class="token comment">// 状态转变为 resolved 方法</span>\n\t<span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// 判断传入元素是否为 Promise 值，如果是，则状态改变必须等待前一个状态改变后再进行改变</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span>\n\t\n\t\t<span class="token comment">// 保证代码的执行顺序为本轮事件的末尾</span>\n\t\t<span class="token comment">// setTimeout(() =&gt; {</span>\n\t\t<span class="token comment">// 只有状态为pending时才能转变</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token comment">// 只有状态为 pending 时才能转变</span>\n\t\t\tself<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token constant">RESOLVED</span>\n\t\n\t\t\t<span class="token comment">// 设置传入的值</span>\n\t\t\tself<span class="token punctuation">.</span>value <span class="token operator">=</span> value\n\t\n\t\t\t<span class="token comment">// 执行回调函数</span>\n\t\t\tself<span class="token punctuation">.</span>resolvedCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">callback</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token function">callback</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token comment">// })</span>\n\t<span class="token punctuation">}</span>\n\t\n\t<span class="token comment">// 状态转变为 rejected 方法</span>\n\t<span class="token keyword">function</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// 保证代码的执行顺序为本轮事件循环的末尾</span>\n\t\t<span class="token comment">// setTimeout(() =&gt; {</span>\n\t\t<span class="token comment">// 只有状态为 pending 时才能转变</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token comment">// 修改状态</span>\n\t\t\tself<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token constant">REJECTED</span>\n\t\n\t\t\t<span class="token comment">// 设置传入的值</span>\n\t\t\tself<span class="token punctuation">.</span>value <span class="token operator">=</span> value\n\t\n\t\t\t<span class="token comment">// 执行回调函数</span>\n\t\t\tself<span class="token punctuation">.</span>rejectedCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">callback</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token function">callback</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token comment">// })</span>\n\t<span class="token punctuation">}</span>\n\t\n\t<span class="token comment">// 将两个方法传入函数执行</span>\n\t<span class="token keyword">try</span> <span class="token punctuation">{</span>\n\t\t<span class="token function">fn</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// 遇到错误时，捕获错误 执行reject函数</span>\n\t\t<span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n\n<span class="token comment">// MyPromise.prototype.then = function (onResolved, onRejected) {</span>\n<span class="token comment">// \t// 首先判断两个参数是否为函数类型 因为这个两个参数是可选参数</span>\n<span class="token comment">// \tonResolved = typeof onResolved == &quot;function&quot; ? onResolved : function (value) {</span>\n<span class="token comment">// \t\treturn value</span>\n<span class="token comment">// \t}</span>\n\n<span class="token comment">// \tonRejected = typeof onRejected == &quot;function&quot; ? onRejected : function (error) {</span>\n<span class="token comment">// \t\treturn error</span>\n<span class="token comment">// \t}</span>\n\n<span class="token comment">// \t// 如果是等待状态 则将函数加入对应列表中</span>\n<span class="token comment">// \tif (this.state === PENDING) {</span>\n<span class="token comment">// \t\tthis.resolvedCallbacks.push(onResolved)</span>\n<span class="token comment">// \t\tthis.rejectedCallbacks.push(onRejected)</span>\n<span class="token comment">// \t}</span>\n\n<span class="token comment">// \t// 如果状态已经凝固，则直接执行对应状态的函数</span>\n<span class="token comment">// \tif (this.state === RESOLVED) {</span>\n<span class="token comment">// \t\tonResolved(this.value)</span>\n<span class="token comment">// \t}</span>\n\n<span class="token comment">// \tif (this.state === REJECTED) {</span>\n<span class="token comment">// \t\tonRejected(this.value)</span>\n<span class="token comment">// \t}</span>\n<span class="token comment">// }</span>\n</code></pre></div><h4 id="_5-手写-promise-then" tabindex="-1">5.手写 Promise.then <a class="header-anchor" href="#_5-手写-promise-then" aria-hidden="true">#</a></h4><div class="language-javascript"><pre><code><span class="token class-name">MyPromise</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">then</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">onResolved<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// 保存前一个promise的this</span>\n\t<span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span>\n\t<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// 封装前一个promise成功时执行的函数</span>\n\t\t<span class="token keyword">let</span> <span class="token function-variable function">fulfilled</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">try</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">onResolved</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 承前</span>\n\t\t\t\t<span class="token keyword">return</span> result <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span> <span class="token operator">?</span> result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">// 启后</span>\n\t\t\t<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token comment">// 封装前一个promise失败时执行的函数</span>\n\t\t<span class="token keyword">let</span> <span class="token function-variable function">rejected</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">try</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n\t\t\t\t<span class="token keyword">return</span> result <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span> <span class="token operator">?</span> result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">reject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token keyword">switch</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">case</span> <span class="token constant">PENDING</span><span class="token operator">:</span>\n\t\t\t\tself<span class="token punctuation">.</span>resolvedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fulfilled<span class="token punctuation">)</span>\n\t\t\t\tself<span class="token punctuation">.</span>rejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>rejected<span class="token punctuation">)</span>\n\t\t\t\t<span class="token keyword">break</span><span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">case</span> <span class="token constant">RESOLVED</span><span class="token operator">:</span>\n\t\t\t\t<span class="token function">fulfilled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t\t\t<span class="token keyword">break</span>\n\t\t\t<span class="token keyword">case</span> <span class="token constant">REJECTED</span><span class="token operator">:</span>\n\t\t\t\t<span class="token function">rejected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t\t\t<span class="token keyword">break</span>\n\t\t\t<span class="token keyword">default</span><span class="token operator">:</span>\n\t\t\t\t<span class="token keyword">break</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">testMyPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">testMyPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;123456&#39;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h4 id="_6-手写promise-all" tabindex="-1">6.手写Promise.all <a class="header-anchor" href="#_6-手写promise-all" aria-hidden="true">#</a></h4><p>// 1. 核心思路 // 1. 接收一个Promise实例的数组或具有Iterator接口的对象作为参数 // 2. 这个方法返回一个新的Promise对象 // 3. 遍历传入的参数 用Promise.resolve() 将参数“包一层” 使其变成一个promise对象 // 4. 参数所有回调成功才是成功 返回值数组与参数顺序一致 // 5. 参数数组其中一个失败 则触发失败状态 第一个触发失败的Promise错误信息作为Promise.all的错误信息</p><p>// 2.实现代码 // 一般来说 Promise.all 用来处理多个并发请求 也是为了页面数据构造的方法，将一个页面所用到的在不同接口的数据一起请求过来，不过 如果其中一个接口失败了，多个请求也就失败了 页面可能啥也出不来，这就看当前页面的耦合程度了</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">promiseAll</span><span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&quot;argument must be a array&quot;</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token keyword">let</span> resolveCounter <span class="token operator">=</span> <span class="token number">0</span>\n\t\t<span class="token keyword">let</span> promiseNum <span class="token operator">=</span> promises<span class="token punctuation">.</span>length\n\t\t<span class="token keyword">let</span> resolvedResult <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\t\t<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> promiseNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\tPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t\t\tresolveCounter<span class="token operator">++</span>\n\t\t\t\tresolvedResult<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value\n\t\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>resolveCounter <span class="token operator">===</span> promiseNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t\t<span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>resolvedResult<span class="token punctuation">)</span>\n\t\t\t\t<span class="token punctuation">}</span>\n\t\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span>\n\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token punctuation">}</span>\n\n<span class="token comment">// test </span>\n<span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t<span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t<span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">let</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t<span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token function">promiseAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p3<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;res&#39;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h4 id="_7-手写-promise-race" tabindex="-1">7. 手写 Promise.race <a class="header-anchor" href="#_7-手写-promise-race" aria-hidden="true">#</a></h4><p>// 改方法的参数是 Promise 实例数组，然后其then注册的回调方法是数组中的某一个 // Promise 的状态变为fulfilled的时候就执行，因为Promise的状态只能改变一次 // 那么我们只需要把Promise.race中产生的Promise对象的resolve方法 注入到数组中的每一个Promise实例中的回调函数中即可</p><div class="language-javascript"><pre><code>Promise<span class="token punctuation">.</span><span class="token function-variable function">race</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\targs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="_8-手写防抖函数" tabindex="-1">8. 手写防抖函数 <a class="header-anchor" href="#_8-手写防抖函数" aria-hidden="true">#</a></h4><p>// 函数防抖是指在事件被触发n秒后再执行回调，如果在这n秒内事件又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因为用户的多次点击向后端发送多次请求</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>\n\n\t<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token keyword">this</span>\n\t\t<span class="token keyword">let</span> args <span class="token operator">=</span> arguments\n\t\n\t\t<span class="token comment">// 如果此时存在定时器的话 则取消之前的定时器重新计时</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>\n\t\t\ttimer <span class="token operator">=</span> <span class="token keyword">null</span>\n\t\t<span class="token punctuation">}</span>\n\t\n\t\t<span class="token comment">// 设置定时器 使事件间隔指定事件后执行</span>\n\t\ttimer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="_9-手写节流函数" tabindex="-1">9. 手写节流函数 <a class="header-anchor" href="#_9-手写节流函数" aria-hidden="true">#</a></h4><p>// 函数节流是指规定一个单位时间，在这个单位时间内，只能有一次触发时间的回调函数执行，如果在同一个单位时间内 // 某事件被触发多次，只有一次能生效。节流可以使用在scroll函数的事件监听上，通过事件节流来降低事件调用的频率</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">let</span> curTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token keyword">this</span>\n\t\t<span class="token keyword">let</span> args <span class="token operator">=</span> arguments\n\t\t<span class="token keyword">let</span> nowTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token comment">// 如果两次时间间隔超过了指定事件 则执行函数</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>nowTime <span class="token operator">-</span> curTime <span class="token operator">&gt;=</span> delay <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\tcurTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t\t<span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="_10-手写类型判断函数" tabindex="-1">10. 手写类型判断函数 <a class="header-anchor" href="#_10-手写类型判断函数" aria-hidden="true">#</a></h4><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// 判断数据是null的情况</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token string">&#39;null&#39;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token comment">// 判断数据是引用类型的情况</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">const</span> typeStr <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n\t\t<span class="token keyword">const</span> str <span class="token operator">=</span> typeStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n\t\t<span class="token keyword">const</span> type <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>\n\t\t<span class="token keyword">return</span> type<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token keyword">typeof</span> value\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="_13-手写bind函数" tabindex="-1">13. 手写bind函数 <a class="header-anchor" href="#_13-手写bind函数" aria-hidden="true">#</a></h4><div class="language-javascript"><pre><code><span class="token comment">// bind函数的实现步骤</span>\n<span class="token comment">// 1. 判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用call等方式调用的情况</span>\n<span class="token comment">// 2. 保存当前函数的引用，获取其余传入参数值</span>\n<span class="token comment">// 3. 创建一个函数返回</span>\n<span class="token comment">// 4. 函数内部使用apply来绑定函数调用，需要判断函数作为构造函数的情况，这个时候需要传入当前函数的this给apply调用，其余情况都传入指定的上下文对象。</span>\n\n<span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myBind</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// 判断调用函数是否为函数</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;Error&#39;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token comment">// 获取参数</span>\n\t<span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n\t<span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">this</span>\n\t<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// 根据调用方式 传入不同绑定值</span>\n\t\t<span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>\n\t\t\t<span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Fn</span> <span class="token operator">?</span> <span class="token keyword">this</span> <span class="token operator">:</span> context<span class="token punctuation">,</span>\n\t\t\targs<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="_14-函数柯里化的实现" tabindex="-1">14. 函数柯里化的实现 <a class="header-anchor" href="#_14-函数柯里化的实现" aria-hidden="true">#</a></h4><div class="language-javascript"><pre><code><span class="token comment">// 函数柯里化指的是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。</span>\n<span class="token keyword">function</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// 获取函数需要的参数长度</span>\n\t<span class="token keyword">let</span> length <span class="token operator">=</span> fn<span class="token punctuation">.</span>length\n\targs <span class="token operator">=</span> args <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n\t<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">let</span> subArgs <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n\n\t\t<span class="token comment">// 拼接得到现有的所有参数</span>\n\t\t<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\tsubArgs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span>\n\n\t\t<span class="token comment">// 判断参数的长度是否已经满足函数所需参数的长度</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>subArgs<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token comment">// 如果满足 执行函数</span>\n\t\t\t<span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> subArgs<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token comment">// 如果不满足，递归返回柯里化的参数，等待参数的传入</span>\n\t\t\t<span class="token keyword">return</span> <span class="token function">curry</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> fn<span class="token punctuation">,</span> subArgs<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="_15-实现ajax请求" tabindex="-1">15. 实现AJAX请求 <a class="header-anchor" href="#_15-实现ajax请求" aria-hidden="true">#</a></h4><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">customAjax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> <span class="token constant">SEVER_URL</span> <span class="token operator">=</span> <span class="token string">&#39;/server&#39;</span>\n\t<span class="token keyword">const</span> xhl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token comment">// 创建 Http 请求</span>\n\txhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token constant">SEVER_URL</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n\t<span class="token comment">// 设置状态监听函数</span>\n\txhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span>\n\t\t<span class="token comment">// 当请求成功时</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token function">handle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>statusText<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token comment">// 设置请求失败的监听函数</span>\n\txhr<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>statusText<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token comment">// 设置请求头信息</span>\n\txhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">&quot;json&quot;</span>\n\txhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Accept&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span>\n\t<span class="token comment">// 发送 Http 请求</span>\n\txhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',39)];p.render=function(a,t,p,e,c,l){return n(),s("div",null,o)};export{t as __pageData,p as default};
