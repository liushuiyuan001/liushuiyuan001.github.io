import{o as n,c as s,b as a}from"./app.3647fd36.js";const t='{"title":"","description":"","frontmatter":{},"relativePath":"js/BASE.md","lastUpdated":1638278412586}',p={},o=[a('<ol><li><p>js有哪些类型 number,string,boolean,object,undefined,null,symble,bigInt</p></li><li><p>so 面试题来了？</p><ol><li>typeof null ???? object why？历史原因因为null编码问题</li><li>typeof array === &#39;object&#39; ???? yes 数组也是object类型</li></ol></li><li><p>数组常用方法</p><ol><li>在数组末尾增加push,在末尾处删除pop pop返回删除的元素 push返回新数组的长度</li><li>在数组头部增加unshift,在头部处删除shift shift返回删除的元素 unshift返回新数组的长度</li><li>在指定下标添加 splice（obj,index,0）返回空数组</li><li>在指定下标删除 splice (obj,index,1) 或者替换都是返回被删除的元素或者被替换的元素组成的数组</li></ol></li><li><p>this执行问题</p><ol><li><p>函数调用模式，当一个函数不是一个对象的属性时，直接作为函数来调用时， this指向全局对象</p></li><li><p>方法调用模式，如果一个函数作为一个对象的方法来调用是，this指向这个对象</p></li><li><p>构造器调用模式 如果一个函数用new调用时，函数指向前会新创建一个对象，this指向这个新创建的对象</p></li><li><p>app、call、bind调用模式 apply方法接收两个参数: 一个是this绑定的对象 一个市参数数组。call方法接手的参数一个市this绑定的对象，后面的其余参数是传入函数执行的参数。也就是说，在使用call方法时 传递给函数的参数必须挨个列举出来。bind方法通过传入一个对象，返回一个this绑定了传入对象的新函数。这个函数的this指向除了使用new时会被改变，其他情况下都不会改变</p><p>这四种方法，使用构造器调用的函数优先级最高 然后是apply call bind 然后是方法 然后是函数调用模式</p></li></ol></li><li><p>减少垃圾回收</p><ol><li>对数组进行优化： 在清空一个数组时，最简单的方法就是给其赋值为[],但是与此同时会创建一个新的空对象，可以将数组的长度设置为0，以此来达到清空数组的目的。</li><li>对object进行优化：对象尽量复用，对于不再使用的对象，就将其设置为null，尽快被回收</li><li>对函数进行优化：在循环中国的函数表达式 如果可以复用 尽量放在函数的外面</li></ol></li><li><p>哪些情况会导致内存泄漏</p><ol><li>意外的全局变量：由于使用未声明的变量，而意外的创建了一个全局变量，而使这个变量一直留在内存中无法被回收</li><li>被遗忘的计时器或回调函数：设置了setInterval 定时器，而忘记取消它 如果循环函数有对外部变量的引用的话，那么这个变量会被一直留在内存中，而无法被回收。</li><li>脱离DOM的引用：获取一个DOM元素的引用，而后面这个元素被删除，由于一直保留了对这个元素的引用，所以它也无法被回收</li><li>闭包：不合理的使用闭包，从而导致某些变量一直被留在内存当中</li></ol></li><li><p>Async/await 对比Promise的优势</p><ol><li>代码读起来更加同步，Promise虽然摆脱了回调地狱， 但是then的链式调用也会带来额外的阅读负担</li><li>Promise传递中间值非常麻烦，而async/await几乎是同步的写法，非常优雅</li><li>错误处理友好 async/await可以用成熟的try/catch Promise的错误捕获非常冗余</li><li>调试友好 Promise的调试很差 由于没有代码块 你不能在一个返回表达式的箭头函数中设置dua难点 如果你在一个then代码块中使用调试器的步进 step-over功能，调试器并不会进入后续的then代码块，因为调试器只能跟踪同步代码的每一步。</li></ol><div class="language-javascript"><pre><code><span class="token keyword">let</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nfs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./a.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tfs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tfs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tfs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\terr <span class="token operator">&amp;&amp;</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;read&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&#39;./a.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;finished&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">testAwait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> data1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&#39;./a.txt&#39;</span><span class="token punctuation">)</span>\n\t<span class="token keyword">const</span> data2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">read</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span>\n\t<span class="token keyword">const</span> data3 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">read</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;data3&#39;</span><span class="token punctuation">,</span> data3<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">testAwait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div></li><li><p>CSS优化和提高性能的方法有哪些？</p><p><strong>加载性能：</strong></p><ol><li>css压缩：将写好的css进行打包压缩，可以减小文件体积。</li><li>css单一样式：当需要下边距和左边距的时候，很多时候会选择使用margin: top 0 bottom 0;但margin-bottom和margin-left执行效率会更高</li><li>减少使用@import，建议使用link，因为后者在页面加载时一起加载，前者是等待页面加载完成之后再进行加载。</li></ol><p><strong>选择器性能：</strong></p><ol><li>关键选择器。选择器的最后的部分为关键选择器（即用来匹配目标元素的部分）。CSS选择符是从右到左进行匹配的。当使用后代选择器的时候，浏览器会遍历所有子元素来确定是否是指定的元素等等；</li><li>如果规则拥有ID选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间去匹配它们了）</li><li>避免使用通配规则，如*{}计算次数惊人，只对需要用到的元素进行选择</li><li>尽量少的去对标签进行选择，而是用class</li><li>尽量少的去使用后代选择器，减低选择器的权重值。后代选择器的开销是最高的，尽量将选择器的深度降到最低，最高不要超过三层，更多的使用类来关联每一个标签元素</li><li>了解哪些属性是可以通过继承而来的，然后避免对这些属性重复指定规则。</li></ol><p><strong>渲染性能：</strong></p><ol><li>慎用使用高性能属性：浮动 定位</li><li>尽量减少页面重排、重绘</li><li>去除空规则：{} 。空规则的产生原因一般来说是为了预留样式。去除这些空规则则无疑能减少css文件体积</li><li>属性为0时 不加单位</li><li>属性值为浮动小数0.xx，可以省略小数点之前的0</li><li>标准化各种浏览器前缀：带浏览器前缀的在前。标准属性在后</li><li>不适用@import前缀，它会影响css的加速速度。</li><li>选择器优化嵌套，尽量避免层级过深。</li><li>css雪碧图，同一页面相近部分的小图标，方便使用，减少页面的请求次数，但是同时图片本身会变大，使用时，优劣考虑清楚再使用，</li><li>正确使用display的属性 由于display的作用，某些样式组合会无效，徒增样式体积的同时也会影响解析性能</li><li>不滥用web字体。对于中文网站来说WebFonts可能很陌生，国外却很流行。web fonts通常体积庞大，而且一些浏览器在下载web fonts时会阻塞页面渲染损伤性能。</li></ol><p><strong>可维护性、健壮性</strong></p><ol><li>将具有相同属性的样式抽离出来，整合并通过class在页面中进行使用，提高css的可维护性</li><li>样式与内容分离：将css代码定义到外部css中。</li></ol></li></ol>',1)];p.render=function(a,t,p,c,l,e){return n(),s("div",null,o)};export{t as __pageData,p as default};
